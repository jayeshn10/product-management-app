<myproduct>
<div class="mt-5 container">
  <div class="">
    <div class="p-0 card">
      <div class="card-header">
        <div class="row">
          <div class="col">
            <h4>{ props.title }</h4>
          </div>
          <div class="col">
            <div class="row">
              <div class="col-md-9">
                <form onsubmit={ searchprod } class="row">
                  <input placeholder="search here..." class="form-control col-sm-8" name='searchqry'><button class="btn btn-primary col-sm-4">search</button>
                </form>
              </div>
              <div class="d-flex justify-content-end col-md-3">
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addprodModal">
                  Add
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body">
        <table class="table table-sm table-striped table-bordered table-hover">
          <tr>
            <th>Id</th>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
          </tr>
          <tr each={ item in state.items }>
            <td>{ item.id } </td>
            <td>{state.inEditMode.status && state.inEditMode.itmid === item.id ? '' : item.name } <div if={state.inEditMode.status && state.inEditMode.itmid===item.id}> <input name="ename" value={item.name} class="form-control {state.e_error_pname && state.inEditMode.itmid===item.id ? 'is-invalid': ''}">
                <div class="invalid-feedback" if={state.e_error_pname && state.inEditMode.itmid===item.id}>
                  Please enter a valid Product name.
                </div>
              </div>
            </td>
            <td> {state.inEditMode.status && state.inEditMode.itmid === item.id ? '' : item.price } <div if={state.inEditMode.status && state.inEditMode.itmid===item.id}> <input name="eprice" value={ item.price } class="form-control {state.e_error_price && state.inEditMode.itmid===item.id ? 'is-invalid': ''}">
                <div class="invalid-feedback" if={state.e_error_price && state.inEditMode.itmid===item.id}>
                  Please enter valid Price.
                </div>
              </div>
            </td>
            <td>{state.inEditMode.status && state.inEditMode.itmid === item.id ? '' : item.quantity } <div if={state.inEditMode.status && state.inEditMode.itmid===item.id}> <input name="equantity" value={ item.quantity } class="form-control {state.e_error_qty && state.inEditMode.itmid===item.id ? 'is-invalid': ''}">
                <div class="invalid-feedback" if={state.e_error_qty && state.inEditMode.itmid===item.id}>
                  Please enter valid Quantity.
                </div>
              </div>
            </td>
            <td><button class="btn btn-primary btn-sm" if={state.inEditMode.itmid !==item.id} onclick={()=>edit(item.id)}>Edit</button> <button if={state.inEditMode.status && state.inEditMode.itmid===item.id} onclick={()=>editsave(item.id)} class="btn btn-primary btn-sm" >save</button> <button if={state.inEditMode.status && state.inEditMode.itmid===item.id} onclick={editcancle} class="btn btn-secondary btn-sm">Cancle</button></td>
          </tr>
        </table>
      </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="addprodModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Add Product</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick={addmodelhide}>
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="addnewprod" onsubmit={ add }>
              <div class="mb-3 row">
                <label class="form-label col-form-label col-sm-2">Name</label>
                <div class="col-sm-10"><input name='pname' placeholder="enter name" type="text" class="form-control {state.a_error_pname ? 'is-invalid': ''}">
                  <div class="invalid-feedback" if={state.a_error_pname}>
                    Please enter a valid Product name.
                  </div>
                </div>
              </div>
              <div class="mb-3 row"><label class="form-label col-form-label col-sm-2">Price</label>
                <div class="col-sm-10"><input name='price' placeholder="enter price" type="text" class="form-control {state.a_error_price ? 'is-invalid': ''}">
                  <div class="invalid-feedback" if={state.a_error_price}>
                    Please enter a valid Price.
                  </div>
                </div>
              </div>
              <div class="mb-3 row"><label class="form-label col-form-label col-sm-2">Quantity</label>
                <div class="col-sm-10"><input name='quantity' placeholder="enter Quantity" type="text" class="form-control {state.a_error_qty ? 'is-invalid': ''}">
                  <div class="invalid-feedback" if={state.a_error_qty}>
                    Please enter a valid Quantity.
                  </div>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick={addmodelhide}>Close</button>
            <button class="btn btn-primary" form="addnewprod">Add</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
function getCookie(name) {
  var cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    var cookies = document.cookie.split(";");
    for (var i = 0; i < cookies.length; i++) {
      var cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }

  return cookieValue;
}

function updateproductable(e) {

  fetch(`http://127.0.0.1:8000/product/?limit=1000&name__contains=${e.state.searchqry}`)
    .then((res) => res.json())
    .then(
      (data) => {

        e.update({
          items: data.results
        })


      },
      (error) => {
        console.log('error');

      }
    )



}


export default {
  onBeforeMount(props, state) {
    // initial state
    this.state = {
      items: props.items,
      inEditMode: { status: false, itmid: null },
      e_error_pname: false,
      e_error_price: false,
      e_error_qty: false,
      a_error_pname: false,
      a_error_price: false,
      a_error_qty: false,
      searchqry: ''
    }
  },
  add(e) {
    e.preventDefault()
    // update only the text state

    let name = e.target.pname.value
    let price = e.target.price.value
    let quantity = e.target.quantity.value

    let a_valid = true

    
    if (!(name.match("^[A-Za-z0-9]+$"))) {
      a_valid = false
      console.log('wrong input')
      this.update({ a_error_pname: true })
    } else {
      this.update({ a_error_pname: false })
    }

    
    if (!(price.match(/^(\d*)((\.(\d{0,2})?)?)$/i))) {
      a_valid = false
      console.log('wrong input')
      this.update({ a_error_price: true })
    } else {
      this.update({ a_error_price: false })
    }

    
    if (!(quantity.match(/^[0-9]+$/))) {
      a_valid = false
      console.log('wrong input')
      this.update({ a_error_qty: true })
    } else {
      this.update({ a_error_qty: false })
    }

    if (a_valid) {

      var csrftoken = getCookie("csrftoken");

      fetch("http://127.0.0.1:8000/product/create/", {
          method: "POST",
          headers: {
            "Content-type": "application/json",
            "X-CSRFToken": csrftoken,
          },
          body: JSON.stringify({ name: name, price: price, quantity: quantity }),
        })
        .then((response) => {
          updateproductable(this)
          console.log('fetchdone')

        })
        .catch(function(error) {
          console.log("ERROR:", error)
        })


      $('#addprodModal').modal('hide')
      this.update({
        a_error_pname: false,
        a_error_price: false,
        a_error_qty: false,
      })

      $("input[name=pname]").val('')
      $("input[name=price]").val('')
      $("input[name=quantity]").val('')


    }

  },
  edit(id) {

    this.update({
      inEditMode: { status: true, itmid: id }
    })
  },
  editcancle() {

    this.update({
      inEditMode: { status: false, itmid: null },
      e_error_pname: false,
      e_error_price: false,
      e_error_qty: false,
    })
  },
  editsave(eid) {

    let ename = $("input[name=ename]").val()
    let eprice = $("input[name=eprice]").val()
    let equantity = $("input[name=equantity]").val()

    let valid = true

    if (!(ename.match("^[A-Za-z0-9]+$"))) {
      valid = false
      console.log('wrong input')
      this.update({ e_error_pname: true })
    } else {
      this.update({ e_error_pname: false })
    }

    if (!(eprice.match(/^(\d*)((\.(\d{0,2})?)?)$/i))) {
      valid = false
      console.log('wrong input')
      this.update({ e_error_price: true })
    } else {
      this.update({ e_error_price: false })
    }


    if (!(equantity.match(/^[0-9]+$/))) {
      valid = false
      console.log('wrong input')
      this.update({ e_error_qty: true })
    } else {
      this.update({ e_error_qty: false })
    }


    if (valid) {

      var csrftoken = getCookie("csrftoken");

      fetch(`http://127.0.0.1:8000/product/update/${eid}`, {
          method: "POST",
          headers: {
            "Content-type": "application/json",
            "X-CSRFToken": csrftoken,
          },
          body: JSON.stringify({ id: eid, name: ename, price: eprice, quantity: equantity }),
        })
        .then((response) => {
          updateproductable(this)
          //console.log(response)

        })
        .catch(function(error) {
          console.log("ERROR:", error)
        })

      this.update({
        inEditMode: { status: false, itmid: null }
      })

      updateproductable(this)

    }

  },
  searchprod(e) {
    e.preventDefault()
    this.update({
      searchqry: e.target.searchqry.value
    })

    updateproductable(this)

  },
  addmodelhide(e) {
    console.log('model hide')


    e.preventDefault()
    this.update({
      a_error_pname: false,
      a_error_price: false,
      a_error_qty: false,
    })

    $("input[name=pname]").val('')
    $("input[name=price]").val('')
    $("input[name=quantity]").val('')
  },
}
</script>
</myproduct>